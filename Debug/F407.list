
F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000053c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006c4  080006cc  000106cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080006c4  080006c4  000106c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080006c8  080006c8  000106c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000106cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000106cc  2**0
                  CONTENTS
  7 .bss          00000060  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000060  20000060  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000106cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00001bbc  00000000  00000000  000106fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000062f  00000000  00000000  000122b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000198  00000000  00000000  000128e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000140  00000000  00000000  00012a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000bcd  00000000  00000000  00012bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000c22  00000000  00000000  0001378d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000143af  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000004b4  00000000  00000000  0001442c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000148e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080006ac 	.word	0x080006ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080006ac 	.word	0x080006ac

080001c8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80001d2:	4909      	ldr	r1, [pc, #36]	; (80001f8 <NVIC_EnableIRQ+0x30>)
 80001d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d8:	095b      	lsrs	r3, r3, #5
 80001da:	79fa      	ldrb	r2, [r7, #7]
 80001dc:	f002 021f 	and.w	r2, r2, #31
 80001e0:	2001      	movs	r0, #1
 80001e2:	fa00 f202 	lsl.w	r2, r0, r2
 80001e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	e000e100 	.word	0xe000e100

080001fc <USART2_SendByte>:
	while (!(USART2->SR & USART_SR_TXE));
			USART2->DR = ' ';
}


void USART2_SendByte (uint8_t byte){
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & USART_SR_TXE)){
 8000206:	bf00      	nop
 8000208:	4b08      	ldr	r3, [pc, #32]	; (800022c <USART2_SendByte+0x30>)
 800020a:	881b      	ldrh	r3, [r3, #0]
 800020c:	b29b      	uxth	r3, r3
 800020e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000212:	2b00      	cmp	r3, #0
 8000214:	d0f8      	beq.n	8000208 <USART2_SendByte+0xc>

	}
	USART2->DR = byte;
 8000216:	4b05      	ldr	r3, [pc, #20]	; (800022c <USART2_SendByte+0x30>)
 8000218:	79fa      	ldrb	r2, [r7, #7]
 800021a:	b292      	uxth	r2, r2
 800021c:	809a      	strh	r2, [r3, #4]
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40004400 	.word	0x40004400

08000230 <USART2_init>:

void USART2_init (){
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000234:	4a1e      	ldr	r2, [pc, #120]	; (80002b0 <USART2_init+0x80>)
 8000236:	4b1e      	ldr	r3, [pc, #120]	; (80002b0 <USART2_init+0x80>)
 8000238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800023a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800023e:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000240:	4a1b      	ldr	r2, [pc, #108]	; (80002b0 <USART2_init+0x80>)
 8000242:	4b1b      	ldr	r3, [pc, #108]	; (80002b0 <USART2_init+0x80>)
 8000244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= GPIO_MODER_MODER2_1;
 800024c:	4a19      	ldr	r2, [pc, #100]	; (80002b4 <USART2_init+0x84>)
 800024e:	4b19      	ldr	r3, [pc, #100]	; (80002b4 <USART2_init+0x84>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f043 0320 	orr.w	r3, r3, #32
 8000256:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER3_1;
 8000258:	4a16      	ldr	r2, [pc, #88]	; (80002b4 <USART2_init+0x84>)
 800025a:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <USART2_init+0x84>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000262:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (7 << (2*4)) | (7 << (3*4));
 8000264:	4a13      	ldr	r2, [pc, #76]	; (80002b4 <USART2_init+0x84>)
 8000266:	4b13      	ldr	r3, [pc, #76]	; (80002b4 <USART2_init+0x84>)
 8000268:	6a1b      	ldr	r3, [r3, #32]
 800026a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800026e:	6213      	str	r3, [r2, #32]
	USART2->BRR = 13440000/115200; // Вот тут не понял
 8000270:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <USART2_init+0x88>)
 8000272:	2274      	movs	r2, #116	; 0x74
 8000274:	811a      	strh	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8000276:	4a10      	ldr	r2, [pc, #64]	; (80002b8 <USART2_init+0x88>)
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <USART2_init+0x88>)
 800027a:	899b      	ldrh	r3, [r3, #12]
 800027c:	b29b      	uxth	r3, r3
 800027e:	f043 030c 	orr.w	r3, r3, #12
 8000282:	b29b      	uxth	r3, r3
 8000284:	8193      	strh	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RXNEIE;
 8000286:	4a0c      	ldr	r2, [pc, #48]	; (80002b8 <USART2_init+0x88>)
 8000288:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <USART2_init+0x88>)
 800028a:	899b      	ldrh	r3, [r3, #12]
 800028c:	b29b      	uxth	r3, r3
 800028e:	f043 0320 	orr.w	r3, r3, #32
 8000292:	b29b      	uxth	r3, r3
 8000294:	8193      	strh	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_UE;
 8000296:	4a08      	ldr	r2, [pc, #32]	; (80002b8 <USART2_init+0x88>)
 8000298:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <USART2_init+0x88>)
 800029a:	899b      	ldrh	r3, [r3, #12]
 800029c:	b29b      	uxth	r3, r3
 800029e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	8193      	strh	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn);
 80002a6:	2026      	movs	r0, #38	; 0x26
 80002a8:	f7ff ff8e 	bl	80001c8 <NVIC_EnableIRQ>
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	40023800 	.word	0x40023800
 80002b4:	40020000 	.word	0x40020000
 80002b8:	40004400 	.word	0x40004400

080002bc <TIM4_IRQHandler>:
	TIM4->ARR = 25000;
	TIM4->DIER |= TIM_DIER_UIE;
	TIM4->CR1 |= TIM_CR1_CEN;
}

void TIM4_IRQHandler(){
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	if (TIM4->SR & TIM_SR_UIF){
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <TIM4_IRQHandler+0x38>)
 80002c2:	8a1b      	ldrh	r3, [r3, #16]
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	f003 0301 	and.w	r3, r3, #1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d007      	beq.n	80002de <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 80002ce:	4a09      	ldr	r2, [pc, #36]	; (80002f4 <TIM4_IRQHandler+0x38>)
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <TIM4_IRQHandler+0x38>)
 80002d2:	8a1b      	ldrh	r3, [r3, #16]
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	f023 0301 	bic.w	r3, r3, #1
 80002da:	b29b      	uxth	r3, r3
 80002dc:	8213      	strh	r3, [r2, #16]
	}
	GPIOA->ODR ^= GPIO_ODR_ODR_6;
 80002de:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <TIM4_IRQHandler+0x3c>)
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <TIM4_IRQHandler+0x3c>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80002e8:	6153      	str	r3, [r2, #20]
}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	40000800 	.word	0x40000800
 80002f8:	40020000 	.word	0x40020000

080002fc <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
	if (USART2->SR & USART_SR_RXNE){
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <USART2_IRQHandler+0x30>)
 8000304:	881b      	ldrh	r3, [r3, #0]
 8000306:	b29b      	uxth	r3, r3
 8000308:	f003 0320 	and.w	r3, r3, #32
 800030c:	2b00      	cmp	r3, #0
 800030e:	d008      	beq.n	8000322 <USART2_IRQHandler+0x26>
		uint8_t byte = USART2->DR;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <USART2_IRQHandler+0x30>)
 8000312:	889b      	ldrh	r3, [r3, #4]
 8000314:	b29b      	uxth	r3, r3
 8000316:	71fb      	strb	r3, [r7, #7]
		RINGBUFFER_put(byte, &RX_BUF);
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	4905      	ldr	r1, [pc, #20]	; (8000330 <USART2_IRQHandler+0x34>)
 800031c:	4618      	mov	r0, r3
 800031e:	f000 f83d 	bl	800039c <RINGBUFFER_put>
	}
}
 8000322:	bf00      	nop
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40004400 	.word	0x40004400
 8000330:	2000001c 	.word	0x2000001c

08000334 <USART2_Return>:

void USART2_Return(){
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
	uint8_t byte;
	while (RINGBUFFER_get(&byte, &RX_BUF)){
 800033a:	e003      	b.n	8000344 <USART2_Return+0x10>
		USART2_SendByte(byte);
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	4618      	mov	r0, r3
 8000340:	f7ff ff5c 	bl	80001fc <USART2_SendByte>
	while (RINGBUFFER_get(&byte, &RX_BUF)){
 8000344:	1dfb      	adds	r3, r7, #7
 8000346:	4905      	ldr	r1, [pc, #20]	; (800035c <USART2_Return+0x28>)
 8000348:	4618      	mov	r0, r3
 800034a:	f000 f853 	bl	80003f4 <RINGBUFFER_get>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d1f3      	bne.n	800033c <USART2_Return+0x8>
	}
}
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	2000001c 	.word	0x2000001c

08000360 <main>:

int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	RINGBUFFER_init(&RX_BUF);
 8000364:	4803      	ldr	r0, [pc, #12]	; (8000374 <main+0x14>)
 8000366:	f000 f807 	bl	8000378 <RINGBUFFER_init>
	USART2_init();
 800036a:	f7ff ff61 	bl	8000230 <USART2_init>

  while (1)
  {
	  USART2_Return();
 800036e:	f7ff ffe1 	bl	8000334 <USART2_Return>
 8000372:	e7fc      	b.n	800036e <main+0xe>
 8000374:	2000001c 	.word	0x2000001c

08000378 <RINGBUFFER_init>:
#include "stm32f4xx.h"
#include "ringbuffer.h"


void RINGBUFFER_init(RINGBUFFER* buf){
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	buf->head = 0;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2200      	movs	r2, #0
 8000384:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	buf->tail = 0;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	2200      	movs	r2, #0
 800038c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <RINGBUFFER_put>:

int RINGBUFFER_put(uint8_t val, RINGBUFFER* buf){
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	6039      	str	r1, [r7, #0]
 80003a6:	71fb      	strb	r3, [r7, #7]
	uint16_t next = (buf->head + 1) % 64;
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80003ae:	3301      	adds	r3, #1
 80003b0:	425a      	negs	r2, r3
 80003b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003b6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80003ba:	bf58      	it	pl
 80003bc:	4253      	negpl	r3, r2
 80003be:	81fb      	strh	r3, [r7, #14]
	if (next == buf->tail){
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80003c6:	89fa      	ldrh	r2, [r7, #14]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d101      	bne.n	80003d0 <RINGBUFFER_put+0x34>
		return 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	e00b      	b.n	80003e8 <RINGBUFFER_put+0x4c>
	}
	buf->data[buf->head] = val;
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80003d6:	4619      	mov	r1, r3
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	545a      	strb	r2, [r3, r1]
	buf->head = next;
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	89fa      	ldrh	r2, [r7, #14]
 80003e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	return 1;
 80003e6:	2301      	movs	r3, #1
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	3714      	adds	r7, #20
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <RINGBUFFER_get>:

int RINGBUFFER_get(uint8_t* val, RINGBUFFER* buf){
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	6039      	str	r1, [r7, #0]
	if (buf->head == buf->tail){
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800040a:	429a      	cmp	r2, r3
 800040c:	d101      	bne.n	8000412 <RINGBUFFER_get+0x1e>
		return 0;
 800040e:	2300      	movs	r3, #0
 8000410:	e017      	b.n	8000442 <RINGBUFFER_get+0x4e>
	}
	*val = buf->data[buf->tail];
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8000418:	461a      	mov	r2, r3
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	5c9a      	ldrb	r2, [r3, r2]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	701a      	strb	r2, [r3, #0]
	buf->tail = (buf->tail + 1) % 64;
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8000428:	3301      	adds	r3, #1
 800042a:	425a      	negs	r2, r3
 800042c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000430:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000434:	bf58      	it	pl
 8000436:	4253      	negpl	r3, r2
 8000438:	b29a      	uxth	r2, r3
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	return 1;
 8000440:	2301      	movs	r3, #1
}
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
	...

08000450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000488 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000454:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000456:	e003      	b.n	8000460 <LoopCopyDataInit>

08000458 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800045a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800045c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800045e:	3104      	adds	r1, #4

08000460 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000460:	480b      	ldr	r0, [pc, #44]	; (8000490 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000464:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000466:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000468:	d3f6      	bcc.n	8000458 <CopyDataInit>
  ldr  r2, =_sbss
 800046a:	4a0b      	ldr	r2, [pc, #44]	; (8000498 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800046c:	e002      	b.n	8000474 <LoopFillZerobss>

0800046e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800046e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000470:	f842 3b04 	str.w	r3, [r2], #4

08000474 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000474:	4b09      	ldr	r3, [pc, #36]	; (800049c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000476:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000478:	d3f9      	bcc.n	800046e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800047a:	f000 f841 	bl	8000500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800047e:	f000 f8f1 	bl	8000664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000482:	f7ff ff6d 	bl	8000360 <main>
  bx  lr    
 8000486:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000488:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800048c:	080006cc 	.word	0x080006cc
  ldr  r0, =_sdata
 8000490:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000494:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000498:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 800049c:	20000060 	.word	0x20000060

080004a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004a0:	e7fe      	b.n	80004a0 <ADC_IRQHandler>

080004a2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <HardFault_Handler+0x4>

080004b6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <MemManage_Handler+0x4>

080004bc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <BusFault_Handler+0x4>

080004c2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <UsageFault_Handler+0x4>

080004c8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000504:	4a16      	ldr	r2, [pc, #88]	; (8000560 <SystemInit+0x60>)
 8000506:	4b16      	ldr	r3, [pc, #88]	; (8000560 <SystemInit+0x60>)
 8000508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800050c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000514:	4a13      	ldr	r2, [pc, #76]	; (8000564 <SystemInit+0x64>)
 8000516:	4b13      	ldr	r3, [pc, #76]	; (8000564 <SystemInit+0x64>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f043 0301 	orr.w	r3, r3, #1
 800051e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000520:	4b10      	ldr	r3, [pc, #64]	; (8000564 <SystemInit+0x64>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000526:	4a0f      	ldr	r2, [pc, #60]	; (8000564 <SystemInit+0x64>)
 8000528:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <SystemInit+0x64>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000534:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <SystemInit+0x64>)
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <SystemInit+0x68>)
 800053a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800053c:	4a09      	ldr	r2, [pc, #36]	; (8000564 <SystemInit+0x64>)
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <SystemInit+0x64>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000546:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <SystemInit+0x64>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800054e:	f000 f80d 	bl	800056c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000552:	4b03      	ldr	r3, [pc, #12]	; (8000560 <SystemInit+0x60>)
 8000554:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000558:	609a      	str	r2, [r3, #8]
#endif
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	e000ed00 	.word	0xe000ed00
 8000564:	40023800 	.word	0x40023800
 8000568:	24003010 	.word	0x24003010

0800056c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	2300      	movs	r3, #0
 8000578:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800057a:	4a36      	ldr	r2, [pc, #216]	; (8000654 <SetSysClock+0xe8>)
 800057c:	4b35      	ldr	r3, [pc, #212]	; (8000654 <SetSysClock+0xe8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000584:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000586:	4b33      	ldr	r3, [pc, #204]	; (8000654 <SetSysClock+0xe8>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800058e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	3301      	adds	r3, #1
 8000594:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d103      	bne.n	80005a4 <SetSysClock+0x38>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80005a2:	d1f0      	bne.n	8000586 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80005a4:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <SetSysClock+0xe8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d002      	beq.n	80005b6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80005b0:	2301      	movs	r3, #1
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	e001      	b.n	80005ba <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80005b6:	2300      	movs	r3, #0
 80005b8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d142      	bne.n	8000646 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80005c0:	4a24      	ldr	r2, [pc, #144]	; (8000654 <SetSysClock+0xe8>)
 80005c2:	4b24      	ldr	r3, [pc, #144]	; (8000654 <SetSysClock+0xe8>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80005cc:	4a22      	ldr	r2, [pc, #136]	; (8000658 <SetSysClock+0xec>)
 80005ce:	4b22      	ldr	r3, [pc, #136]	; (8000658 <SetSysClock+0xec>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005d6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80005d8:	4a1e      	ldr	r2, [pc, #120]	; (8000654 <SetSysClock+0xe8>)
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <SetSysClock+0xe8>)
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80005e0:	4a1c      	ldr	r2, [pc, #112]	; (8000654 <SetSysClock+0xe8>)
 80005e2:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <SetSysClock+0xe8>)
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ea:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80005ec:	4a19      	ldr	r2, [pc, #100]	; (8000654 <SetSysClock+0xe8>)
 80005ee:	4b19      	ldr	r3, [pc, #100]	; (8000654 <SetSysClock+0xe8>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80005f6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <SetSysClock+0xe8>)
 80005fa:	4a18      	ldr	r2, [pc, #96]	; (800065c <SetSysClock+0xf0>)
 80005fc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80005fe:	4a15      	ldr	r2, [pc, #84]	; (8000654 <SetSysClock+0xe8>)
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <SetSysClock+0xe8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000608:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800060a:	bf00      	nop
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <SetSysClock+0xe8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0f9      	beq.n	800060c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <SetSysClock+0xf4>)
 800061a:	f240 7205 	movw	r2, #1797	; 0x705
 800061e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000620:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <SetSysClock+0xe8>)
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <SetSysClock+0xe8>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	f023 0303 	bic.w	r3, r3, #3
 800062a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800062c:	4a09      	ldr	r2, [pc, #36]	; (8000654 <SetSysClock+0xe8>)
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <SetSysClock+0xe8>)
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	f043 0302 	orr.w	r3, r3, #2
 8000636:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000638:	bf00      	nop
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <SetSysClock+0xe8>)
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	f003 030c 	and.w	r3, r3, #12
 8000642:	2b08      	cmp	r3, #8
 8000644:	d1f9      	bne.n	800063a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000
 800065c:	07405419 	.word	0x07405419
 8000660:	40023c00 	.word	0x40023c00

08000664 <__libc_init_array>:
 8000664:	b570      	push	{r4, r5, r6, lr}
 8000666:	4e0d      	ldr	r6, [pc, #52]	; (800069c <__libc_init_array+0x38>)
 8000668:	4c0d      	ldr	r4, [pc, #52]	; (80006a0 <__libc_init_array+0x3c>)
 800066a:	1ba4      	subs	r4, r4, r6
 800066c:	10a4      	asrs	r4, r4, #2
 800066e:	2500      	movs	r5, #0
 8000670:	42a5      	cmp	r5, r4
 8000672:	d109      	bne.n	8000688 <__libc_init_array+0x24>
 8000674:	4e0b      	ldr	r6, [pc, #44]	; (80006a4 <__libc_init_array+0x40>)
 8000676:	4c0c      	ldr	r4, [pc, #48]	; (80006a8 <__libc_init_array+0x44>)
 8000678:	f000 f818 	bl	80006ac <_init>
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	10a4      	asrs	r4, r4, #2
 8000680:	2500      	movs	r5, #0
 8000682:	42a5      	cmp	r5, r4
 8000684:	d105      	bne.n	8000692 <__libc_init_array+0x2e>
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800068c:	4798      	blx	r3
 800068e:	3501      	adds	r5, #1
 8000690:	e7ee      	b.n	8000670 <__libc_init_array+0xc>
 8000692:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000696:	4798      	blx	r3
 8000698:	3501      	adds	r5, #1
 800069a:	e7f2      	b.n	8000682 <__libc_init_array+0x1e>
 800069c:	080006c4 	.word	0x080006c4
 80006a0:	080006c4 	.word	0x080006c4
 80006a4:	080006c4 	.word	0x080006c4
 80006a8:	080006c8 	.word	0x080006c8

080006ac <_init>:
 80006ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ae:	bf00      	nop
 80006b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006b2:	bc08      	pop	{r3}
 80006b4:	469e      	mov	lr, r3
 80006b6:	4770      	bx	lr

080006b8 <_fini>:
 80006b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ba:	bf00      	nop
 80006bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006be:	bc08      	pop	{r3}
 80006c0:	469e      	mov	lr, r3
 80006c2:	4770      	bx	lr
